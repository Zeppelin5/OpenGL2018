参考：
刚哥推荐：https://learnopengl-cn.github.io/01%20Getting%20started/02%20Creating%20a%20window/
视频：https://youtu.be/k9LDF016_1A


注意：
build文件夹是cmake编译后生成的文件

一 glad.zip,glfw-3.2.1.zip是glad和glfw的压缩包，glad解压缩，glfw用cmake编译

二
创建一个新的文件夹OpenGLConfig以供自建按程序使用,以免配置的glfw换位置导致已有程序链接错误
OpenGLConfig中include的来源：
GLFW来自glfwANDbuild\glfw-3.2.1\glfw-3.2.1\include\GLFW
glad和KHR来自glad\glad\include
glm来自glmANDbuild\glm\glm 由glm官网下载，不用编译cmake，直接将包含大量hpp文件的glm根目录复制进来即可
OpenGLconfig中lib的来源：(build有点大，不放在里面了)
glfwANDbuild\build\src\Debug

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
三(拷贝OpenGLconfig后可直接从这一步开始弄!!!!!!!!参考图片)
创建自己新的OpenGL程序（空程序），将include和lib库包含OpenGLConfig里的两个文件夹，链接库加上opengl32.lib和glfw3.lib

四
将glad\glad\src中的glad.c拖进VS自建项目中的源文件目录下,再建一个main.cpp与之并列即可，main的源码见后面。

五
编译即可。

六
这些config文件适合编译64位的版本

源码：
#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <iostream>

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow *window);

// settings
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;

int main()
{
	// glfw: initialize and configure
	// ------------------------------
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); // uncomment this statement to fix compilation on OS X
#endif

														 // glfw window creation
														 // --------------------
	GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "LearnOpenGL", NULL, NULL);
	if (window == NULL)
	{
		std::cout << "Failed to create GLFW window" << std::endl;
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window);
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

	// glad: load all OpenGL function pointers
	// ---------------------------------------
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
	{
		std::cout << "Failed to initialize GLAD" << std::endl;
		return -1;
	}

	// render loop
	// -----------
	while (!glfwWindowShouldClose(window))
	{
		// input
		// -----
		processInput(window);

		// render
		// ------
		glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		// glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
		// -------------------------------------------------------------------------------
		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	// glfw: terminate, clearing all previously allocated GLFW resources.
	// ------------------------------------------------------------------
	glfwTerminate();
	return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow *window)
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
	// make sure the viewport matches the new window dimensions; note that width and 
	// height will be significantly larger than specified on retina displays.
	glViewport(0, 0, width, height);
}